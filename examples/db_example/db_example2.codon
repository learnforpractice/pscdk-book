from chain.database import PrimaryTable
from chain.contract import Contract

@packer
class A(object):
    a: u64
    b: str
    def __init__(self, a: u64, b: str):
        self.a = a
        self.b = b

    def get_primary(self) -> u64:
        return self.a

@contract()
class MyContractBase(Contract):
    def test(self, value: str):
        print('value:', value)

@contract(main=True)
class MyContract(MyContractBase):

    def __init__(self):
        super().__init__()

    @action('test')
    def test(self, value: str):
        # super().test(value)
        # return
        print('db_test')
        table = PrimaryTable[A](n'hello', n'', n'mytable')
        key = 123u64
        it = table.find(key)
        if it.is_ok():
            print('+++++update value:', value)
            item = A(key, value)
            table.update(it, item, n'hello')
        else:
            print('+++++store value:', value)
            item = A(key, value)
            table.store(item, n'hello')
